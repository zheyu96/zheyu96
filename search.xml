<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>/2021/05/19/hello-world/</url>
    <content><![CDATA[<h1 id="2021全國高中數理科學競賽培訓營篩選題目答案"><a href="#2021全國高中數理科學競賽培訓營篩選題目答案" class="headerlink" title="2021全國高中數理科學競賽培訓營篩選題目答案"></a>2021全國高中數理科學競賽培訓營篩選題目答案</h1><h2 id="P1"><a href="#P1" class="headerlink" title="P1"></a>P1</h2><p>在全域宣告變數A=4，而又宣告本地變數A=3，造成區域變數會遮蔽全域變數(Variable shadowing)，而呈現A=3之效果<br>而sum=0+1+2+3+4=10，迴圈共運作5次</p>
<h2 id="P2"><a href="#P2" class="headerlink" title="P2"></a>P2</h2><h3 id="a"><a href="#a" class="headerlink" title="(a)"></a>(a)</h3><hr>
<p><strong>公式解作法</strong>:$\mathcal{O}(\ n)$<br>$a_{n}=\frac{\sqrt5}{5}([\frac{1+\sqrt5}{2}]^n-[\frac{1-\sqrt5}{2}]^n).$<br>缺點: 多次計算${\sqrt5}$(無理數)造成浮點數誤差</p>
<hr>
<p><strong>遞迴作法</strong>: $\mathcal{O}(\ 2^n)$<br>基底:f(0)=1,f(1)=1<br>遞推式:$f_{n}=f_{n-1}+f_{n-2}$<br>缺點:效率低落<br>層層遞迴，每往下一項接分支成兩項，且許多項重複計算</p>
<hr>
<p><strong>DP作法</strong>:$\mathcal{O}( \ n)$<br>dp[0]=0,dp[1]=1<br>dp狀態轉移式:dp[n]=dp[n-1]+dp[n-2]<br>優化細節:若只需末項，使用兩數覆蓋即可<br>dp[n-1]=dp[n];dp[n-2]=dp[n-1]<br>空間複雜度自$\mathcal{O}( \ n)$降至$\mathcal{O}(\ 1)$ </p>
<hr>
<p><strong>矩陣快速冪作法</strong>:$\mathcal{O}(\ log  n)$<br>$f_{0}=1,f_{1}=1$<br>$\begin{bmatrix}<br>{f_{n}}         \newline<br>{f_{n-1}}         \end{bmatrix}=<br>\begin{bmatrix}<br>{1} &amp; {1}   \newline<br>{1} &amp; {0}    \end{bmatrix}^{n-1}<br>\begin{bmatrix}<br>{f_{1}}  \newline<br>{f_{0}}   \end{bmatrix}$</p><br>舉例:<br>$23=(10111)_{2}=2^4+2^2+2^1+2^0$<br>說明:</p>
<p>每次都將轉移矩陣做平方並更新，取末位若是1則乘入，否則不乘入<br>如:<br>$\begin{bmatrix}<br>{1} &amp; {1}   \newline<br>{1} &amp; {0}    \end{bmatrix}^{23}=\begin{bmatrix}<br>{1} &amp; {1}   \newline<br>{1} &amp; {0}    \end{bmatrix}^{2^4}\begin{bmatrix}<br>{1} &amp; {1}   \newline<br>{1} &amp; {0}    \end{bmatrix}^{2^2}\begin{bmatrix}<br>{1} &amp; {1}   \newline<br>{1} &amp; {0}    \end{bmatrix}^{2^1}\begin{bmatrix}<br>{1} &amp; {1}   \newline<br>{1} &amp; {0}    \end{bmatrix}^{2^0}$<br><strong>Pseudo Code</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">make matrix <span class="title">trans</span><span class="params">(轉移矩陣)</span></span>=&#123;&#123;<span class="number">1</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;&#125; , base&#123;基底&#125; =&#123;&#123;<span class="number">1</span>&#125;,&#123;<span class="number">1</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">func <span class="built_in">mul</span>(matrix a , matrix b): </span><br><span class="line">    make matrix c</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span>(<span class="number">0</span> to <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">j</span>(<span class="number">0</span> to <span class="number">2</span>)&#123;</span><br><span class="line">            c[i][j]=<span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> <span class="built_in">k</span>(<span class="number">0</span> to <span class="number">2</span>)</span><br><span class="line">                c[i][j] += a[i][k] * b[k][j]</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">end func</span><br><span class="line"></span><br><span class="line">func <span class="built_in">fast_pow</span>(matrix m, <span class="keyword">int</span> times): </span><br><span class="line">    make matrix tem = trans, ans = &#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;&#125;</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">t</span>(n to <span class="number">0</span> (n!=<span class="number">0</span>) each time &gt;&gt;<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (t &amp; <span class="number">1</span>)&#123;</span><br><span class="line">            ans = <span class="built_in">mul</span>(ans , tem)</span><br><span class="line">        &#125;</span><br><span class="line">        tem = <span class="built_in">mul</span>(tem , tem)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">end func</span><br><span class="line"></span><br><span class="line">main:</span><br><span class="line">make n = 輸入項數</span><br><span class="line">t=<span class="built_in">fast_pow</span>(trans , n).</span><br><span class="line">outout t[<span class="number">1</span>][<span class="number">0</span>]+t[<span class="number">1</span>][<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="b"><a href="#b" class="headerlink" title="(b)"></a>(b)</h3><p>維護每次運算後末兩位，直到找到<strong>重複且連續的兩項</strong>。往後的費氏數列將產生循環節，最壞情況也僅需運算10000(100*100)次(每次推算必為定值，不隨n成長)，便能找出循環節。往後查詢便能壓在複雜度$\mathcal{O}(\ 1)$</p>
]]></content>
      <tags>
        <tag>SCMS 入營考題</tag>
      </tags>
  </entry>
</search>
